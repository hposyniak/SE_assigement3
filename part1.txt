1. A model that stores a collection of blocks. Blocks can be metal or wood; can be painted, sanded, or chrome plated; 
and can sometimes be radioactive or magnetized. What design pattern would allow the system to easily add new types of
 blocks without changing existing code and how? 

    Visitor pattern 
    (I am quite convinced this calls for a factory method pattern, this is because with a factory model we can create new object 
    using the creator interface to make subclasses of the what would be the 'block' object without changing the existing code. 
    These can have different unique features (for example material they are made of, outlook or other physical properties) 
    and implement their own methods.)

2. A model for a game that represents a robot. The robot navigates a maze that has obstacles. While playing the game, 
the robot can be upgraded with new parts that change its abilities like speed, weapons, and shields. Which design 
principle allows the robot object to change its behaviour at runtime in flexible ways and how? 

    Decorator pattern allows adding behaviours dynamically

    Opened-Closed principle

    (The decoration pattern would be the most appropriate for this model. It allows to attach new abilities to the base abilities
    set of the robot. This would be placed inside wrappers that contain the behaviours of the robot, we would then add a layer of
    new abilities when unlocked that would override the previous one. This pattern allows changes in a flexible way and can be done
    at runtime so the game can continue to run.)

3. A model stores a phone number, and the UI (a keypad) which allows the user to enter digits one at a time.
A different part of the UI wants to respond to each key being entered; however:
a) the two parts of the UI should be decoupled
b) the model should be decoupled from the UI (model knows nothing about the UI). 

Which pattern would allow this and how?

    Maybe visitor pattern here? or observer like in the coding exercise (I don't really like this answer it needs to be reorganised)
    (it would allow the UI to access the phone numbers by visiting the numbers without them having to directly interact but would 
    use a visitor istead. This would then keep model and UI separated. The two UI parts can also be decoupled since the visitor can
    be used by them both. Also the the UI would need to perform the same operation on the numbers and the visitor methods can be overloaded if the 
    language allows it making the program more efficient and the code more readable)
    

4. A library supports recursively searching a directory for files. It allows the client code to provide it an object 
to filter the results. For each file which the library finds, it will ask the filter object if that file should be 
accepted or rejected. (See Java's FileFilter). Which design pattern would solve this problem, why and how?

    Strategy
    (I agree, strategy pattern is the best option. The strategies would be the filters that the user can apply to the search,
    these can be independent from each other and new ones can be added  if needed without increasing the complexity of the main 
    class. The program would also allow the user to switch from one filter to another during run time and these would then decide
    if to accept or reject the files found by the library.)